{"version":3,"sources":["App.js","HelloWorld.js","MyHeading.js","Greeting.js","MyComponent.js","serviceWorker.js","index.js","katze.jpg"],"names":["App","className","src","ImageName","alt","href","target","rel","HelloWorld","React","Component","MyHeading","titles","Fragment","map","title","index","key","this","props","paragraphText","children","Greeting","name","MyComponent","state","inputFieldValue","secondValue","thirdValue","event","console","log","refs","myParagraph","innerText","value","setState","type","onChange","handleChange","bind","ref","onClick","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oPA0BeA,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAWF,UAAU,WAAWG,IAAI,SAC9C,8EAEO,4CAFP,wBAIA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kB,mCCDOC,E,iLARL,OACQ,kD,GAHOC,IAAMC,WC0BhBC,E,iLAtBP,IAAMC,EAAS,CAAC,iCAAkC,eAAgB,eAElE,OACI,kBAAC,IAAMC,SAAP,KACI,4BACCD,EAAO,IAEPA,EAAOE,IAAI,SAACC,EAAOC,GAAR,OAAkB,wBAAIC,IAAKD,GAAT,IAAkBD,EAAlB,OAEZ,2BAAIG,KAAKC,MAAMC,eAEhCF,KAAKC,MAAME,c,GAbJZ,IAAMC,WCIfY,E,iLAJP,OAAO,uCAAaJ,KAAKC,MAAMI,U,GAFhBd,IAAMC,WCyCdc,E,YAtCX,WAAYL,GAAQ,IAAD,8BACf,4CAAMA,KACDM,MAAQ,CACTC,gBAAiB,GACjBC,YAAa,GACbC,WAAY,IALD,E,yEASPC,GACRC,QAAQC,IAAIb,MACZY,QAAQC,IAAIF,EAAMvB,U,mCAGTuB,GACTC,QAAQC,IAAIb,MACZA,KAAKc,KAAKC,YAAYC,UAAYL,EAAMvB,OAAO6B,MAE/CjB,KAAKkB,SAAS,CAACV,gBAAiBG,EAAMvB,OAAO6B,U,+BAK7C,OACI,kBAAC,IAAMtB,SAAP,KACI,2BAAOwB,KAAK,OAAOC,SAAUpB,KAAKqB,aAAaC,KAAKtB,QAEpD,kBAAC,EAAD,CAAUK,KAAML,KAAKO,MAAMC,kBAE3B,uBAAGe,IAAI,gBACP,4BAAQC,QAASxB,KAAKyB,YAAYH,KAAKtB,OAAvC,0B,GAhCUT,IAAMC,WCSZkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SACjDH,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,gBACxDH,IAASC,OAAO,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,YD6GpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.f907b8e5.chunk.js","sourcesContent":["import React from 'react';\nimport ImageName from './katze.jpg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={ImageName} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Hallo Welt!2222 kjhjkhk asdasd lkasldfkams\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nclass HelloWorld extends React.Component {\n    render() {\n          return (\n                  <div>\n                    Hello, React!\n                  </div>\n                )\n        }\n};\n \nexport default HelloWorld;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//import ReactDOM from 'react-dom';\n\nclass MyHeading extends React.Component {\n    render() {\n        const titles = ['A header will be rendered!!!!!', 'second Title', 'third Title'];\n        const showParagraph = true;\n        return (/**statt DIV */\n            <React.Fragment>\n                <h1>\n                {titles[0]}</h1>\n                {/* Kommentar im React */}\n                {titles.map((title, index) => <h1 key={index}> {title} </h1>)}\n                {/* Conditional im React */}\n                {showParagraph && <p>{this.props.paragraphText}</p>}\n                {/* Children im Property */}\n                {this.props.children}\n            </React.Fragment>\n        );/**statt DIV */\n    }\n}\n\nMyHeading.propTypes = {\n    paragraphText: PropTypes.string.isRequired\n};\n//ReactDOM.render(<MyHeading paragraphText=\"A paragraph will be added\"/>, document.getElementById('heading'));\n\nexport default MyHeading;","import React from 'react';\n\nclass Greeting extends React.Component {\n    render() {\n        return <p>Welcome, {this.props.name}</p>;\n    }\n}\n\nexport default Greeting;","import React from 'react';\nimport Greeting from './Greeting'\n\nclass MyComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputFieldValue: '', \n            secondValue: '',\n            thirdValue: ''\n        };\n    }\n\n    handleClick(event) {\n        console.log(this);\n        console.log(event.target);\n    }\n\n    handleChange(event) {\n        console.log(this);\n        this.refs.myParagraph.innerText = event.target.value;\n        // Ändert die Status-Variablen\n        this.setState({inputFieldValue: event.target.value});\n        // Danach läuft sofort this.render() los und rendert neu!\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <input type=\"text\" onChange={this.handleChange.bind(this)} />\n                {/*Einfügen einer Variable, die sich ändert*/} \n                <Greeting name={this.state.inputFieldValue} />\n                {/*Referenz zu einem HTML DOM Element statt document.getElementByID*/} \n                <p ref=\"myParagraph\"></p>\n                <button onClick={this.handleClick.bind(this)}>\n                    Klick mich jetzt!\n                </button>\n            </React.Fragment>\n        )\n    }    \n}\n\nexport default MyComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n//import $ from 'jquery';\n//import Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport HelloWorld from './HelloWorld';\nimport MyHeading from './MyHeading';\nimport MyComponent from './MyComponent';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<HelloWorld />, document.getElementById('hello-world'));\nReactDOM.render(<MyHeading>\n                    <HelloWorld />\n                    <MyComponent />\n                </MyHeading>\n                , document.getElementById('heading'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/katze.9597e258.jpg\";"],"sourceRoot":""}